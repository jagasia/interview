Core java 7 questions
	oops
	diff interface and abstract class
	public static void main
	string buffere and string builder	
	final finally finalize
spring
	actuator
	servlet dispatcher
	boot

controller and rest controller

hibernate

servlet jsp
exception
hashtable and hashmap
spring boot

no questions from aws

---------------------------------------
oops
how to create thread
exception handling
structure or hierarchy of exception		*****
spring vs spring boot

have you deployed any project in aws 
	what are the steps

-----------------------------------
oops
about project
infrastructure of project
MVC flow
monolithic vs microservices
scope of bean
	singleton, prototype
wrapper classes in java
packages in java
collections in java
how to create Threads in java
other way to create an object
diff exception and error
can we use more than one catch block for a try
what is a @RestController
Restful webservices
System.out.println				out is an (static) object of PrintStream declared inside the System
Abstract class, Interface
	partial implementation 
	till java 7 or earlier, interface had no implementation
	abstract class can be inherited by a class
	interface can be implemented by a class
	only one abstract class can be inherited by a class
	many interfaces can be implemented by a class
	all data members in interface are public static final 
	all methods in interface are public only
	abstract class allows all access specifiers
---------------
oops
public static void main
what happens if we replace public as private
abstract class
what are collection classes?
what are spring modules?
spring boot features
how to create a thread?		implements Runnable, extends Thread
spring jdbc template		RowMapper
what is scope			singleton	and 	prototype
what will you do if your project cannot find jdk
what is core container in spring?
what will you do if you dont want to use tomcat server?
what are microservices?
API gateway
final finally finalize
if you dont want to use a class in the spring boot application	
	@SpringBootApplication(exclude=ClassName.class)

----------------------
oops
System.out.println
public static void main
what happens if we replace public as private?
synchronization
serialization
diff between errors and exceptions
RestController
Restful web services
abstract class and interface
final class
spring boot
what are spring modules?		core, aop, dao, ORM, test
if you dont want to use tomcat
in sql, difference between procedure and function
front end, 
	css selectors	for class		.
diff between div and span
--------------------------------
java 8 features
	lambda (symbol), stream, functional interface (extend another function not possible)
scope of spring bean
diff between function and predicate
how to create a thread
what is maven?
how to create spring boot project using maven.	steps
how to connect spring boot to database
how to implement hibernate in spring boot
components of spring framework
hibernate get method and load method
	get is used to find by primary key
	load for any other criteria
----------------------------------------
AWS
	what is aws?
diff between jre, jvm, jdk
what is infrastructure as a code

-----------------
HTML
CSS
Js

servlet jsp
----------------
explain about project
	spring jpa
	spring boot
	collections
	jdbc
	basic questions in curriculum

	adv

introduction
diff between string and string buffer
diff betwen	hashmap and treemap

hashset

interface
inheritance

spring boot annotations		6 annotations

controller	vs	Rest controller
	difference between 
	this is used in MVC project
		redirection		return url		
		form submission to the controller

		REST CONTROLLER
			does not support session
			each method is independent conversation

			each method is mapped to an URL	

			each functionality is provided using URL as a micro service

		in rest controller	
			return "hello";			means hello is a value returned
		in controller
			return "hello";			means hello is the url		hello.jsp

		a rest controller is only meant to produce output or do some task. Nothing related to VIEW


	how a lob is mapped using JPA repository



	@Lob
	private byte[] pic;



join types in sql
normalization

reverse the string

sort a string using map

maven
sonar
login

annotation

dependency injection

ioc container

orm


mockito

@JsonIgnore		

we had a class
class User
{
	username
	password
	......
	@JsonIgnore		this will ignore this field in the json object created
	profilePicture		byte[]					longblob in mysql
}

when a rest api returns list of users			[{"username"="rama",....},{},{}]

---------------------------------------------------

core java:
------------
collections
multithreading and io
jdbc

-------------------------------------
maven

autowired annotation

dependency injection

amazon cloud

	we created a spring boot application	(rest controller) connects with the database using JPA repository
		GET		retrieve all Entities
		GET		retrieve an enityt by id
		POST		add
		PUT		modify
		DELETE		delete


	we deployed this application in AWS	Elastic Beanstalk container
	
	we were able to access the urls from anywhere

	how this app is able to connect with mysql db?

	we created mysql db in aws using 	RDS		Relational Database Service

	i) AWS Elastic Beanstalk 		application
	ii) RDS					database		and we configured so that it allows 
								public access
								all traffic
								any region

	a rest controller do not have UI		like JSP

	Feign client
		Spring Cloud
			Eureka server and client
			Feign client
			Ribbon		(we did not have in our syllabus)

	what is the use of Feign client?
		allows a spring boot application to access another spring boot application

		our spring boot rest api is deployed in aws beanstalk
		another spring boot mvc project will access that aws app using "Feign client"

		this project is deployed in docker container 	(docker hub)
		so that any client can run this (without even having java in their computer)

		docker run -p 8080:8080 jagindia/mymvc


	





What is set?			collection of distinct elements
				do not allow duplicates		means it will reject not exception
What is abstract class?
				is incomplete. means some methods are implemented some are left to sub classes to implement. Meant to be a super class. cannot be instantiated.
What is static block?
				block executed even before main method. only once
Method overloading and method overriding				
Multithreading
Final keyword			final data member, final method, final class	
				finally (exception block)		finalize	last method executed by garbage collector while cleaning up the resource of object		dispose		we only call this

What is the use of throw	throw is used to throw 1 exception and throws for multiple exceptions (WRONG)	
				public void display() throws Ex1, Ex2
				throws never throw. throws inform the compiler (which is finding a checked excep)
				that this method throws a checked exception but does not handle. the caller has to handle. in that way, compiler forgives this method and pass

What is throwable
What is dependency injection
What is the use of CSS
What is JavaScript
What is advantages of spring boot
Annotations
What is the use of join
What is types of join
What is primary key
What is unique key
Commit and rollback
			in core java, jdbc, how can you rollback a transaction?
		but in jdbc, all transactions are commited or rolledback automatically. How to stop that and have control to commit or rollback by our choice?
		con.setAutoCommit(false);		//by default it is true
		con.commit();	
		con.rollback();
What is the use of junit
What is the use of maven

@Test. This annotation denotes that a method is a test method. ...
@ParameterizedTest. Parameterized tests make it possible to run a test multiple times with different arguments. ...
		you can supply values (test cases) as an array list
@DisplayName. ...
@BeforeEach. ...
@AfterEach. ...
@BeforeAll. ...
@AfterAll. ...
@Tag.

What is spring rest services
What is flow of spring boot
What is use of logging
What is sonar cube
What is jpa
What is association mapping in jpa 
What is repository
What is spring cloud
Deploy models
Different types of cloud
Benefits of cloud computing




Java 8 features
What is collections in Java
Difference between hashmap and hashtable
What is multithreading in java
What is the use of method overloading and method overriding

What is exception and errors in java
What is use of interface and abstract class
What is use of dependency injection
What is advantages of spring boot
Flow of spring boot application
What is the use of style sheet in css
What are the tags available in html
What is the purpose of JavaScript
What is join and types 
What is the primary, unique and foreign key
What is the use of rollback and commit
What is the junit
How many test u can write for method
How test cases written minimum
What is the use of maven
What is the use of spring rest api
What is the purpose of logging
How u making the code quality
What is jpa
Association mapping in jpa
What is advantages of spring cloud
What is advantages of cloud computing
What are the deployment models available in cloud computing




spring vs spring boot
	spring boot encourages convention over configuration

	in spring mvc, component scan base package must be specified.
	in spring boot, if we create controller classes under base package, we need not specify
		convention

	boot has starter dependencies
		group of dependencies and easy to manage

		starter =	spring core, context, context support, etc

	boot has internal tomcat server

	we do not need to download tomcat server at all


configuration
	XML
		component scan base package
		<bean>
	annotations
		@ComponentScan(
		@Bean		or @Component

			@Bean is used only for methods
			@Component is used on the class	(mostly we use pre defined class so we cannot use this)

		

Java 8 features
What is collections in Java
Difference between hashmap and hashtable
What is multithreading in java
What is the use of method overloading and method overriding

What is exception and errors in java
What is use of interface and abstract class
What is use of dependency injection
What is advantages of spring boot
Flow of spring boot application
What is the use of style sheet in css
What are the tags available in html
What is the purpose of JavaScript
What is join and types 
What is the primary, unique and foreign key
What is the use of rollback and commit
What is the junit
How many test u can write for method
How test cases written minimum				@Test	annotations @Parameterized
What is the use of maven
What is the use of spring rest api
What is the purpose of logging
How u making the code quality
What is jpa
Association mapping in jpa
What is advantages of spring cloud
What is advantages of cloud computing
What are the deployment models available in cloud computing



Oops concepts 
Abstraction 
Encapsulation
Throw and throws 
Private
rExceptions 
Collection
Internal working of hashmap
Maven spring hibernate dispatchservlet
Auto wire
Ddl dml




build tool
	ant
	maven			project automation tool
				creates a good project folder structure
					archetype		
						quickstart, web 
				update project
				build
					goals like 		clean		install
				build without test also		-exludeTest		
	gradle



Cloud
	provide anything as a service
		SaaS
		PaaS
		IaaS

	storage service
	runtime environment
	

	if you develop a software using an application online
		PaaS

	but to deploy that developed software in a central location or cluster servers then we are obtaining
		IaaS

	ms office is available as a service	(instead of buying a CD)
		SaaS
				office365.com		





SELECT INTO 
DIRECTLY IN MYSQL?
	hibernate
	jpa


CREATE TABLE TNAME 
AS
SELECT * FROM TABLE



sPRING cloud
	Eureka server
	Feign client

analyze the
	pay load 
	health

	quality metrics and monitoring how many clients are accessing our service


we created 2 spring boot apps
	one haveing 
		@EnableEurekaServer
	another 
		@EnableEurekaClient

server is running in a specific

		8761




docker build		for creating an image of the application
docker tag		image to the resource created in docker hub
docker push		push the image to the resource in docker hub

			public resource

anybody can pull that image from docker hub and run in their computer


	Docker
		once an application is deployed in docker, 
		it can be run in any computer even without having jdk 




[3:31 PM, 6/28/2021] +9100822: Jobs resultset
What is Autowire
Diff B/W innerhtml and inner text
Reflection
 list and set
Hashcode and equal()
[3:31 PM, 6/28/2021] +9100822: Entryset
[3:31 PM, 6/28/2021] +9100822: Diff types of styling sheet
[3:31 PM, 6/28/2021] +9100822: Class and id
[3:31 PM, 6/28/2021] +9100822: Need of serialization
What is entryset
Annotations 
Annotations used in junit
Innertext vs innerhtml
Type of selectors 
Where vs having in SQL
Application.properties file in MVC 
Reader and inputstream
[3:31 PM, 6/28/2021] +9100822: Singleton vs prototype
diff btw inner html and inner text
how can we inject dependency in springboot
how can we use external css
[3:31 PM, 6/28/2021] +9100822: Annotations i have used in java
 In junit, which annotations i have used
 Difference between div and span
 Difference between singleton and prototype
 Difference between innerjoin and outer join
[3:31 PM, 6/28/2021] +9100822: spring application context types and difference 
Diff between list and set 
Annotations used in junit 
How to change background colour 
Types of joins
[3:31 PM, 6/28/2021] +9100822: CSS selectors 
Co related subquery
Annotations used in spring 
Reader and inputstream
Diff bw list and set
Singleton Vs prototype
[3:31 PM, 6/28/2021] +9100822: Jpa repository
Inner html vs text
Set vs list
Parameterized annotation in junit
IOC container
[3:31 PM, 6/28/2021] +9100822: Css selectors
Innerhtmlvs innertext
Dml and ddl
Autowire
Inline style sheet
Application.properties



What is set?
What is abstract class?
What is static block?
Method overloading and method overriding
Multithreading
Final keyword
What is the use of throw
What is throwable
What is dependency injection
What is the use of CSS
What is JavaScript
What is advantages of spring boot
Annotations
What is the use of join
What is types of join
What is primary key
What is unique key
Commit and rollback
What is the use of junit
What is the use of maven

@Test. This annotation denotes that a method is a test method. ...
@ParameterizedTest. Parameterized tests make it possible to run a test multiple times with different arguments. ...
@DisplayName. ...
@BeforeEach. ...
@AfterEach. ...
@BeforeAll. ...
@AfterAll. ...
@Tag.

What is spring rest services
What is flow of spring boot
What is use of logging
What is sonar cube
What is jpa
What is association mapping in jpa 
What is repository
What is spring cloud
Deploy models
Different types of cloud
Benefits of cloud computing




Java 8 features
What is collections in Java
Difference between hashmap and hashtable
What is multithreading in java
What is the use of method overloading and method overriding

What is exception and errors in java
What is use of interface and abstract class
What is use of dependency injection
What is advantages of spring boot
Flow of spring boot application
What is the use of style sheet in css
What are the tags available in html
What is the purpose of JavaScript
What is join and types 
What is the primary, unique and foreign key
What is the use of rollback and commit
What is the junit
How many test u can write for method
How test cases written minimum
What is the use of maven
What is the use of spring rest api
What is the purpose of logging
How u making the code quality
What is jpa
Association mapping in jpa
What is advantages of spring cloud
What is advantages of cloud computing
What are the deployment models available in cloud computing
[2:32 PM, 6/21/2021] : Oops concepts 
Abstraction 
Encapsulation
[2:32 PM, 6/21/2021] : Throw and throws 
Private
Exceptions 
Collection
Internal working of hashmap
[2:32 PM, 6/21/2021] : Maven spring hibernate dispatchservlet
[2:32 PM, 6/21/2021] : Auto wire
Ddl dml






hashtable vs hashmap

hashtable
	legacy class	
	synchronized

vector			arraylist			index
	synchronized


sync
	synchronized
	synchronized
		are thread safe			no 2 threads access at a time

thread safe variable?
	volatile int age;

	volatile variables does not allow threads to keep cache data. 
	every time, the thread access the var from main memory



volatile
transient		non persistent			JPA hibernate
	IO streams this value will not be stored in stream (file is an example for stream)

Serializable interface
	an object cannot be stored in stream /file unless the class implements serializable


BufferedInputStream		binary/byte
BufferedReader			character



InputStream		OutputStream			BYTE/BINARY
Reader			Writer				character


SQL
having
where



inner and outer join

correlated sub query

CSS selectors
	# for id
	. for class
	element selector


document.getElementById("txt1").value;

type of stylesheets

internal
external
inline



how spring boot works
	1) spring emphazises "convention" over "configuration"

	in spring f/w
		we have configuration xml file or configuration class that specifies 
			component scan base package =
	in spring boot
		if we follow the convention, that we create classes directly inside base package, or sub package of base package, then we dont' need to configure.

		base package is the package where ...Application.java (with main method)


	2) spring boot introduces "starter" dependencies which groups lot of dependencies together
		improves managability
		starter-web
			spring core, spring context, spring context support

	3) initializer that creates and configures the project easily that can be downloaded and imported
		this is called bootstrapping

	4) @SpringBootApplication
		groups lot of annotations inside

		@SpringBootConfiguration	@Configuration

	5) application.properties
		server.port=8080
		server.context-path=/account		

		http://localhost:8080/account

		================================================================
Annotations used in our project
	jpa repository
	hibernate 

	@Entity			means, this class is mapped to a table in the database 	ORM	

			introduced in javax.persistenc package in the EJB, hibernate, JPA, spring data JPA

	@Table			not compulsory but when the table name is different from the class name

	@Id			marks the filed(s) as primary key	

	@GeneratedValue		this cannot be used on fields other than integer family
	
	@Column			not mandatory but when the property of the class is different named as from column

	@Lob			marks this field as large object	(byte[] in java)

	Employee
		id
		name
		dob
@Transient	sdf		SimpleDateFormat		

		

	hibernate validator dependency
		@Size
		@Min
		@Max
		@NotNull		with ref types not on primitive types
		@NotEmpty		with collections
		@NotBlank		with strings
		@Email


	@Repository		is a kind of @Component. we can autowire this in service
	@Service		is a kind of @Component. we can autowire this in controller
	@Controller	or	@RestController
		@RestController		=	@Controller	+	@ResponseBody
	

	@Configuration
	@ComponentScan



===================================================================================
	Serialization
		an object of a class is stored in a stream (ex: file)
		ObjectOutputStream oos
		oos.writeObject(emp)

		emp is an object of Employee.
		If Employee class does not implement Serializable means, we cannot store object of Employee in a file

		employee has sdf		we dont want to store this in file

		transient SimpleDateFormat sdf;

	volatile
		ex:			volatile int age;
		multiple threads access this variable, means, they do not store the value of this var in their cache
		they take value directly from the main memory.

		volatile = thread safe variable
		synchronized block
		synchronized method			are also thread safe

		thread safe means NO 2 threads access a resource at a time


===================================================
exception handling in the project
	throws
	try-catch

	ideally when we create a component or service, we are not supposed to handle the exception
	we use throws
	because, the caller has to handle

	1) the component or service is independent of the type of project
		may be an MVC project
		GUI application using JFrame
		web application
		mobile application
	all these applications access the same component and service via controller

		if you handle the exception, you may display error message in syso which is not going to be displayed in mobile app, or web app?
		so handling exception is left to the end user

	in JSP they can handle or redirect the exception
	using error page
	or
	exception handler controller advice

================================================================================================
spring boot security
	programmative security
	declarative security

	OAuth2	and JWT
	OAuth2 is open authentication f/w
	only because of OAuth2 we are able to use third party authentication service
		facebook
		gmail
		github
		
	Single Sign On		is possible using OAuth2	

	why?????
		it is not possible to retain session information in a REST API

		RestController
			5 methods

	while calling 1st method, you can authenticate the user. but the identity is not remembered when user calls second method

	in Controller
	HttpSession
		session.setAttribute("user",user);		until you session.invalidate();
		the session is remembered

	
	i am running the project
	in browser 
		http://localhost:8080/branch

	a login page comes first

	in a spring boot project
		as soon as you add spring security dependency 

	you run the project
		any url you enter in browser, login page only comes first

	use can login using this login page
	henceforth any other request to any url will be allowed
	
	but when i access the urls from "postman"?
	where will the login page come????????

	so i need to pass the authentication using a token

		JWT

		JSON web token

============================================
overriding
overloading
============================================
div vs span
	div is block		every div comes in separate line
	span is inline		can be a part of a line also

aws services

	IAAS
	SAAS
	PAAS

	Continous Integration 
	Elastic Beanstalk
	EC2
	ECS	and 	EKS
	RDS	Relational Database Service

What is continous Integration:		CI
------------------------------
	is implemented in aws using code pipeline
	we create a project
		we deploye that project in aws
	later, we modify or develop the project
		again we deploy the project in aws
	the role holders are different
		who develop the project
		who deploy the project in aws

	the deployer wants to provide an easy method for you to deploy the application whenever changes are made

	THE deployer creates a code pipeline in aws, that integrates git hub repository to the application in aws
	so if you push your project to the git repository whenever changes are made, 
	git notifies the aws and the changes are updated in aws 

	
Elastic Beanstalk
-------------------
	when you deploy "jar" or "war" to aws,
	use elastic beanstalk

ECS:
-----
	Elastic Container Service
		when you deploye a docker image into aws

EKS:
-----
	Elastic Kubernetes Service
		when we deploy a docker image in cluster

MSK:
----
	Managed Kafka Services 
		producer - consumer				pub-sub model

	topics	producer posts
	consumers receive the topics

	docker-compose.yml		

docker-compose.yml		
	whenever you want to deploy multiple services together
	i) MSK
	ii) when we deploy a spring boot app and mysql together in docker
		both images should run together


	IAAS		we run spring boot app in our computer. but the benefit of cluster is obtained when we deploy our app in aws.
			EKS		this is IAAS
	SAAS		I dont have mysql in my pc. i use aws RDS 		SAAS
	PAAS		java platform		tomcat platform
		we chose java platform for "jar"
		we chose tomcat platform for "war"


	Platform
		it should allow us to develop the project or deploy the project

	SAAS
			Office365

========================================================================
Hibernate
	f/w allows us to do ORM
	writing SQL statement for very usual requirements are taken care by the f/w
	hibernate cache
		if we update an entity
		again and again without any change, that query ("UPDATE") is not executed unnecessarily in db

	HQL
	JPA QL


======================================
Demo1			AWS		

1) we are going to deploy a spring boot application in aws
	create an application in Elastic beanstalk
	create environment as
		java		for jar
		tomcat		for war
	
2) choose sample application and create the env and app
3) deploy our jar file in the environment
4) go to env configuration
	database
	
  and create a mysql sever and specify username and password
	root
	rootuser
5) apply 		it will take time to update the environment


@Entity
public class Branch

then the table name will automatically becomes 		"branch"		b is small notice that


---------------steps to create mysql database in RDS---------------
1) open the application environment
2) go to configuration
3) last option is "database"
4) create a mysql server
5) aFTEr done
	go to configuration of mysql
	1) security groups
	2) edit inbound 
	3) set
		all traffic		(instead of all tcp)
		all region		(instead of custom)

now check the configuration of rds
	copy the end point		use it instead of "localhost"
	3306 is same

	if you connect in mysql work bench you can see a database created "ebdb"
	
	
-------------------------------
deploy the application after making changes in application properties.
---------------------------------

MVC project that is going to access this REST API using "feign" client


deploy this mvc project in docker
that will access rest api from aws



Feign client is used to access rest api from mvc project
	feign client will allow you to map the methods in a rest api to an interface methods

refer project 
	jag-mvc-2

for feign client steps


========================
Let us deploy our mvc project in DOCKER

for that our project should contain Dockerfile 		in same location where pom.xml is present

go to location where Dockerfile is present

build an image
	i) docker build -t jag-docker-demo-1 .
tag it to a docker hub resource	(we created now)
	ii) docker tag jag-docker-demo-1 jagindia/firstrepo
push the same
	iii) docker push jagindia/firstrepo










